
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 05 14:54:06 CST 2024
//----------------------------------------------------

package compiladorapp;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 05 14:54:06 CST 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\007\010\000\002\007\010\000\002\007\012" +
    "\000\002\007\012\000\002\007\002\000\002\010\006\000" +
    "\002\010\011\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\014\006\000" +
    "\002\014\002\000\002\015\005\000\002\015\005\000\002" +
    "\022\010\000\002\022\010\000\002\005\004\000\002\006" +
    "\007\000\002\011\004\000\002\012\013\000\002\012\013" +
    "\000\002\017\006\000\002\017\012\000\002\017\016\000" +
    "\002\013\011\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\002\010\000" +
    "\002\002\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\004\005\005\004\001\002\000\004\006" +
    "\310\001\002\000\004\006\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\027\011\001" +
    "\002\000\004\060\012\001\002\000\006\004\015\005\013" +
    "\001\002\000\014\007\274\010\023\011\021\012\020\027" +
    "\022\001\002\000\004\061\273\001\002\000\014\007\017" +
    "\010\023\011\021\012\020\027\022\001\002\000\004\027" +
    "\266\001\002\000\004\027\032\001\002\000\006\027\uffef" +
    "\053\030\001\002\000\006\027\ufff0\053\026\001\002\000" +
    "\004\027\uffee\001\002\000\006\027\ufff1\053\024\001\002" +
    "\000\004\054\025\001\002\000\004\027\uffed\001\002\000" +
    "\004\054\027\001\002\000\004\027\uffec\001\002\000\004" +
    "\054\031\001\002\000\004\027\uffeb\001\002\000\004\056" +
    "\033\001\002\000\012\010\023\011\021\012\020\027\022" +
    "\001\002\000\004\060\035\001\002\000\034\004\056\005" +
    "\052\014\060\015\061\016\055\017\036\020\051\022\054" +
    "\023\057\024\053\026\047\027\043\061\uffe0\001\002\000" +
    "\004\056\253\001\002\000\006\025\uffc0\061\uffc0\001\002" +
    "\000\006\025\uffbf\061\uffbf\001\002\000\006\025\uffc3\061" +
    "\uffc3\001\002\000\010\021\247\025\uffc1\061\uffc1\001\002" +
    "\000\004\056\243\001\002\000\006\025\uffbe\061\uffbe\001" +
    "\002\000\006\025\uffc2\061\uffc2\001\002\000\004\061\242" +
    "\001\002\000\004\056\236\001\002\000\006\025\uffbd\061" +
    "\uffbd\001\002\000\004\056\075\001\002\000\012\010\023" +
    "\011\021\012\020\027\022\001\002\000\004\056\202\001" +
    "\002\000\004\060\167\001\002\000\004\056\163\001\002" +
    "\000\012\010\023\011\021\012\020\027\022\001\002\000" +
    "\004\056\075\001\002\000\004\056\071\001\002\000\004" +
    "\056\062\001\002\000\010\030\064\031\065\032\063\001" +
    "\002\000\032\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\050\ufffe\051\ufffe\052\ufffe\054\ufffe\055\ufffe\057" +
    "\ufffe\001\002\000\032\041\000\042\000\043\000\044\000" +
    "\045\000\046\000\050\000\051\000\052\000\054\000\055" +
    "\000\057\000\001\002\000\032\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052\uffff\054" +
    "\uffff\055\uffff\057\uffff\001\002\000\004\057\067\001\002" +
    "\000\004\052\070\001\002\000\006\025\uffe7\061\uffe7\001" +
    "\002\000\010\030\064\031\065\032\063\001\002\000\004" +
    "\057\073\001\002\000\004\052\074\001\002\000\006\025" +
    "\uffe8\061\uffe8\001\002\000\022\027\101\030\064\031\065" +
    "\032\063\047\100\050\uffd1\051\uffd1\057\uffd1\001\002\000" +
    "\006\025\uffca\061\uffca\001\002\000\010\050\135\051\134" +
    "\057\136\001\002\000\012\027\124\030\064\031\065\032" +
    "\063\001\002\000\024\041\110\042\105\043\107\044\104" +
    "\045\106\046\112\050\uffdd\051\uffdd\057\uffdd\001\002\000" +
    "\004\057\115\001\002\000\024\041\110\042\105\043\107" +
    "\044\104\045\106\046\112\050\uffdc\051\uffdc\057\uffdc\001" +
    "\002\000\012\027\ufff4\030\ufff4\031\ufff4\032\ufff4\001\002" +
    "\000\012\027\ufff6\030\ufff6\031\ufff6\032\ufff6\001\002\000" +
    "\012\027\ufff3\030\ufff3\031\ufff3\032\ufff3\001\002\000\012" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\001\002\000\012\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\001\002\000\012\027\113" +
    "\030\064\031\065\032\063\001\002\000\012\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\001\002\000\010\050\uffd7\051\uffd7" +
    "\057\uffd7\001\002\000\010\050\uffd6\051\uffd6\057\uffd6\001" +
    "\002\000\004\060\116\001\002\000\034\004\056\005\052" +
    "\014\060\015\061\016\055\017\036\020\051\022\054\023" +
    "\057\024\053\026\047\027\043\061\uffe0\001\002\000\004" +
    "\061\120\001\002\000\010\021\uffcd\025\uffcd\061\uffcd\001" +
    "\002\000\012\027\122\030\064\031\065\032\063\001\002" +
    "\000\010\050\uffd9\051\uffd9\057\uffd9\001\002\000\010\050" +
    "\uffd8\051\uffd8\057\uffd8\001\002\000\024\041\110\042\105" +
    "\043\107\044\104\045\106\046\112\050\uffdb\051\uffdb\057" +
    "\uffdb\001\002\000\024\041\110\042\105\043\107\044\104" +
    "\045\106\046\112\050\uffda\051\uffda\057\uffda\001\002\000" +
    "\012\027\127\030\064\031\065\032\063\001\002\000\010" +
    "\050\uffd3\051\uffd3\057\uffd3\001\002\000\010\050\uffd2\051" +
    "\uffd2\057\uffd2\001\002\000\012\027\132\030\064\031\065" +
    "\032\063\001\002\000\010\050\uffd5\051\uffd5\057\uffd5\001" +
    "\002\000\010\050\uffd4\051\uffd4\057\uffd4\001\002\000\016" +
    "\027\101\030\064\031\065\032\063\047\100\057\uffd1\001" +
    "\002\000\016\027\101\030\064\031\065\032\063\047\100" +
    "\057\uffd1\001\002\000\004\060\137\001\002\000\034\004" +
    "\056\005\052\014\060\015\061\016\055\017\036\020\051" +
    "\022\054\023\057\024\053\026\047\027\043\061\uffe0\001" +
    "\002\000\004\061\141\001\002\000\010\021\uffce\025\uffce" +
    "\061\uffce\001\002\000\004\057\uffd0\001\002\000\004\057" +
    "\uffcf\001\002\000\004\027\145\001\002\000\016\033\147" +
    "\034\150\035\153\036\146\037\152\040\154\001\002\000" +
    "\012\030\ufffa\031\ufffa\032\ufffa\053\ufffa\001\002\000\012" +
    "\030\ufffd\031\ufffd\032\ufffd\053\ufffd\001\002\000\012\030" +
    "\ufffc\031\ufffc\032\ufffc\053\ufffc\001\002\000\012\030\064" +
    "\031\065\032\063\053\155\001\002\000\012\030\ufff9\031" +
    "\ufff9\032\ufff9\053\ufff9\001\002\000\012\030\ufffb\031\ufffb" +
    "\032\ufffb\053\ufffb\001\002\000\012\030\ufff8\031\ufff8\032" +
    "\ufff8\053\ufff8\001\002\000\010\030\064\031\065\032\063" +
    "\001\002\000\004\052\157\001\002\000\006\025\uffe4\061" +
    "\uffe4\001\002\000\004\054\161\001\002\000\004\052\162" +
    "\001\002\000\006\025\uffe2\061\uffe2\001\002\000\010\030" +
    "\064\031\065\032\063\001\002\000\004\057\165\001\002" +
    "\000\004\052\166\001\002\000\006\025\uffe6\061\uffe6\001" +
    "\002\000\034\004\056\005\052\014\060\015\061\016\055" +
    "\017\036\020\051\022\054\023\057\024\053\026\047\027" +
    "\043\061\uffe0\001\002\000\004\061\171\001\002\000\004" +
    "\023\172\001\002\000\004\056\173\001\002\000\022\027" +
    "\101\030\064\031\065\032\063\047\100\050\uffd1\051\uffd1" +
    "\057\uffd1\001\002\000\010\050\135\051\134\057\200\001" +
    "\002\000\004\057\176\001\002\000\004\052\177\001\002" +
    "\000\006\025\uffc8\061\uffc8\001\002\000\004\052\201\001" +
    "\002\000\006\025\uffc9\061\uffc9\001\002\000\004\027\203" +
    "\001\002\000\004\057\204\001\002\000\004\060\205\001" +
    "\002\000\004\025\206\001\002\000\010\030\064\031\065" +
    "\032\063\001\002\000\004\061\210\001\002\000\006\025" +
    "\uffc4\061\uffc4\001\002\000\004\055\212\001\002\000\036" +
    "\004\056\005\052\014\060\015\061\016\055\017\036\020" +
    "\051\022\054\023\057\024\053\025\uffe0\026\047\027\043" +
    "\061\uffe0\001\002\000\006\025\214\061\uffc7\001\002\000" +
    "\010\030\064\031\065\032\063\001\002\000\004\055\216" +
    "\001\002\000\036\004\056\005\052\014\060\015\061\016" +
    "\055\017\036\020\051\022\054\023\057\024\053\025\uffe0" +
    "\026\047\027\043\061\uffe0\001\002\000\006\025\220\061" +
    "\uffc6\001\002\000\010\030\064\031\065\032\063\001\002" +
    "\000\004\055\222\001\002\000\034\004\056\005\052\014" +
    "\060\015\061\016\055\017\036\020\051\022\054\023\057" +
    "\024\053\026\047\027\043\061\uffe0\001\002\000\004\061" +
    "\uffc5\001\002\000\004\027\225\001\002\000\016\033\147" +
    "\034\150\035\153\036\146\037\152\040\154\001\002\000" +
    "\012\030\064\031\065\032\063\053\227\001\002\000\010" +
    "\030\064\031\065\032\063\001\002\000\004\052\231\001" +
    "\002\000\006\025\uffe3\061\uffe3\001\002\000\004\054\233" +
    "\001\002\000\004\052\234\001\002\000\006\025\uffe1\061" +
    "\uffe1\001\002\000\010\021\uffcc\025\uffcc\061\uffcc\001\002" +
    "\000\010\030\064\031\065\032\063\001\002\000\004\057" +
    "\240\001\002\000\004\052\241\001\002\000\006\025\uffe5" +
    "\061\uffe5\001\002\000\004\061\uffba\001\002\000\010\030" +
    "\064\031\065\032\063\001\002\000\004\057\245\001\002" +
    "\000\004\052\246\001\002\000\006\025\uffea\061\uffea\001" +
    "\002\000\004\060\250\001\002\000\034\004\056\005\052" +
    "\014\060\015\061\016\055\017\036\020\051\022\054\023" +
    "\057\024\053\026\047\027\043\061\uffe0\001\002\000\004" +
    "\061\252\001\002\000\006\025\uffcb\061\uffcb\001\002\000" +
    "\010\030\064\031\065\032\063\001\002\000\004\057\255" +
    "\001\002\000\004\052\256\001\002\000\006\025\uffe9\061" +
    "\uffe9\001\002\000\004\027\260\001\002\000\006\057\262" +
    "\062\261\001\002\000\012\010\023\011\021\012\020\027" +
    "\022\001\002\000\004\060\uffdf\001\002\000\004\027\264" +
    "\001\002\000\004\057\265\001\002\000\004\060\uffde\001" +
    "\002\000\004\056\033\001\002\000\004\060\270\001\002" +
    "\000\034\004\056\005\052\014\060\015\061\016\055\017" +
    "\036\020\051\022\054\023\057\024\053\026\047\027\043" +
    "\061\uffe0\001\002\000\004\061\272\001\002\000\004\061" +
    "\uffbc\001\002\000\004\002\uffb8\001\002\000\004\027\303" +
    "\001\002\000\004\027\276\001\002\000\004\056\033\001" +
    "\002\000\004\060\300\001\002\000\034\004\056\005\052" +
    "\014\060\015\061\016\055\017\036\020\051\022\054\023" +
    "\057\024\053\026\047\027\043\061\uffe0\001\002\000\004" +
    "\061\302\001\002\000\004\061\uffbb\001\002\000\004\056" +
    "\033\001\002\000\004\060\305\001\002\000\034\004\056" +
    "\005\052\014\060\015\061\016\055\017\036\020\051\022" +
    "\054\023\057\024\053\026\047\027\043\061\uffe0\001\002" +
    "\000\004\061\307\001\002\000\004\061\uffb9\001\002\000" +
    "\004\027\311\001\002\000\004\060\312\001\002\000\006" +
    "\004\015\005\013\001\002\000\004\061\314\001\002\000" +
    "\004\002\uffb7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\013\001\001\000" +
    "\004\021\274\001\001\000\002\001\001\000\004\021\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\033\001\001\000\004\021\256\001\001\000\002\001" +
    "\001\000\022\003\045\005\041\006\036\007\040\011\037" +
    "\012\043\013\047\016\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\234\001\001\000\004\021\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\143\001\001\000\004\022\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\076\015\101\020\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\124\001\001\000" +
    "\004\024\120\001\001\000\002\001\001\000\004\024\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\116\005\041\006\036" +
    "\007\040\011\037\012\043\013\047\016\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\130\001" +
    "\001\000\004\024\125\001\001\000\004\020\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\142" +
    "\020\102\001\001\000\006\014\141\020\102\001\001\000" +
    "\002\001\001\000\022\003\137\005\041\006\036\007\040" +
    "\011\037\012\043\013\047\016\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\167\005\041\006" +
    "\036\007\040\011\037\012\043\013\047\016\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\173\015\174\020\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\206\001\001\000" +
    "\004\020\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\212\005\041\006\036\007" +
    "\040\011\037\012\043\013\047\016\044\001\001\000\002" +
    "\001\001\000\004\020\214\001\001\000\002\001\001\000" +
    "\022\003\216\005\041\006\036\007\040\011\037\012\043" +
    "\013\047\016\044\001\001\000\002\001\001\000\004\020" +
    "\220\001\001\000\002\001\001\000\022\003\222\005\041" +
    "\006\036\007\040\011\037\012\043\013\047\016\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\225" +
    "\001\001\000\004\020\227\001\001\000\004\020\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\250\005\041\006\036\007" +
    "\040\011\037\012\043\013\047\016\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\266\001\001\000\002\001\001\000" +
    "\022\003\270\005\041\006\036\007\040\011\037\012\043" +
    "\013\047\016\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\276\001\001\000\002\001\001\000\022\003" +
    "\300\005\041\006\036\007\040\011\037\012\043\013\047" +
    "\016\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\303\001\001\000\002\001\001\000\022\003\305" +
    "\005\041\006\036\007\040\011\037\012\043\013\047\016" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\312\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String errors;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CLASE ::= Private Class Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CLASE ::= Public Class Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCION ::= Private Void Identificador DECLARACIONPARAMS Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCION ::= Public Void Identificador DECLARACIONPARAMS Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCION ::= Private TIPOVAR Identificador DECLARACIONPARAMS Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION ::= Public TIPOVAR Identificador DECLARACIONPARAMS Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= SWITCHCASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE ::= CONDICIONALIFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= CONDICIONALIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= LLAMADAFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= DECLARACIONVAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SWITCHCASE ::= Switch Parentesis_a Identificador Parentesis_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCHCASE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASE ::= Case CONSTANTES Dos_puntos BLOQUE Case CONSTANTES Dos_puntos BLOQUE Case CONSTANTES Dos_puntos BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= Case CONSTANTES Dos_puntos BLOQUE Case CONSTANTES Dos_puntos BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASE ::= Case CONSTANTES Dos_puntos BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DOWHILE ::= Do Llave_a BLOQUE Llave_c While Parentesis_a CONDICIONMULTIPLE Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DOWHILE ::= Do Llave_a BLOQUE Llave_c While Parentesis_a CONDICION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WHILE ::= While CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONALIFELSE ::= CONDICIONALIF Else Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALIFELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONALIF ::= If CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALIF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICIONAL ::= Parentesis_a CONDICIONMULTIPLE Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONAL ::= Parentesis_a CONDICION Parentesis_c Llave_a BLOQUE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONMULTIPLE ::= CONDICION O CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONMULTIPLE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONMULTIPLE ::= CONDICION Y CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONMULTIPLE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= No_es CONSTANTES OP_RELACIONALES CONSTANTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= No_es CONSTANTES OP_RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= No_es Identificador OP_RELACIONALES CONSTANTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= No_es Identificador OP_RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= CONSTANTES OP_RELACIONALES CONSTANTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICION ::= CONSTANTES OP_RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICION ::= Identificador OP_RELACIONALES CONSTANTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICION ::= Identificador OP_RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICION ::= No_es CONSTANTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICION ::= No_es Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= CONSTANTES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONPARAMS ::= Parentesis_a TIPOVAR Identificador Coma TIPOVAR Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONPARAMS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONPARAMS ::= Parentesis_a TIPOVAR Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONPARAMS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONVAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONVAR ::= Private TIPOVAR Identificador OP_ARITMETICOS Corchete_a CONSTANTES Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONVAR ::= Public TIPOVAR Identificador OP_ARITMETICOS Corchete_a CONSTANTES Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONVAR ::= Private TIPOVAR Identificador OP_ARITMETICOS CONSTANTES P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONVAR ::= Public TIPOVAR Identificador OP_ARITMETICOS CONSTANTES P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONVAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LLAMADAFUNCION ::= Default Parentesis_a CONSTANTES Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADAFUNCION ::= NextDouble Parentesis_a CONSTANTES Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LLAMADAFUNCION ::= NextInt Parentesis_a CONSTANTES Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LLAMADAFUNCION ::= NextLine Parentesis_a CONSTANTES Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LLAMADAFUNCION ::= Println Parentesis_a CONSTANTES Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LLAMADAFUNCION ::= Identificador Parentesis_a CONSTANTES Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOVAR ::= String Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOVAR ::= Double Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOVAR ::= Int Corchete_a Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOVAR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOVAR ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOVAR ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOVAR ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVAR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OP_RELACIONALES ::= Diferente_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OP_RELACIONALES ::= Exactamente_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OP_RELACIONALES ::= Mayor_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OP_RELACIONALES ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OP_RELACIONALES ::= Menor_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OP_RELACIONALES ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OP_ARITMETICOS ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OP_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OP_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OP_ARITMETICOS ::= Por 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OP_ARITMETICOS ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OP_ARITMETICOS ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONSTANTES ::= C_String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONSTANTES ::= C_real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CONSTANTES ::= C_entera 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CLASE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

